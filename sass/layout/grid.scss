// ============
// GRID
// ============

// @USAGE
// <div class="Grid Grid--withGutter">
//   <div class="u-width1of2 u-lg-width1of4">
//     ...
//   </div>
//   <div class="u-width1of2 u-lg-width1of4">
//     ...
//   </div>
// </div>

// NOTE:
// DO NOT apply dimension or offset utilities to the `Grid` element. All cell
// widths and offsets should be applied to child grid cells.

$grid-gutter-size: $h*2;

// ============
// Grid container
// ============
// All content must be contained within child elements.
// NOTE
// 1. Account for browser defaults of elements that might be the root node of
// the component.

.Grid {
  box-sizing: border-box;
  display: flex; // 1
  flex-flow: row wrap;
  margin: 0; // 1
  padding: 0; // 1
}

// ============
// Grid cell
// ============
// No explicit width by default. Rely on combining a cell with a dimension
// utility or a component class that extends 'Grid'.
// NOTE
// 1. Set flex items to full width by default
// 2. Fix issue where elements with overflow extend past the `.Grid > *` container - https://git.io/vw5oF

.Grid > * {
  box-sizing: inherit;
  flex-basis: 100%; // 1
  min-width: 0; // 2
}

// ============
// Modifiers
// ============

// Gutters ============
.Grid--withGutter {
  margin-left: calc(-.5 * #{$grid-gutter-size});
  margin-right: calc(-.5 * #{$grid-gutter-size});
}

.Grid--withGutter > * {
  padding-left: calc(.5 * #{$grid-gutter-size});
  padding-right: calc(.5 * #{$grid-gutter-size});
}

// ============
// Skinny – narrow left and right columns
// ============

@mixin skinny-col($namespace: "") {
 .Grid-#{$namespace}skinnyLeft > :first-child { margin-left: $h; }
 .Grid-#{$namespace}skinnyRight > :first-child { margin-right: $h; }
}

@media (min-width: $screen-md)     { @include skinny-col("md-"); }

// OUTPUT
// .Grid-skinnyLeft > :first-child { margin-left: 16px; }
// .Grid-skinnyRight > :first-child { margin-right: 16px; }
